package com.elikill58.botmanager.client;

import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.HashMap;

import com.elikill58.botmanager.common.SendableMessage;

import javafx.application.Platform;

public class Client {

	private final String address;
	private final int port;
	private Socket socket;
	private ObjectOutputStream out;
	private HashMap<Integer, String> onlineUsers = new HashMap<>();
	
	/**
	 * Create a new client and his socket
	 * 
	 * @param address the address of the server
	 * @param port the port of the server
	 */
	public Client(String address, int port) {
		this.address = address;
		this.port = port;
		try {
			System.out.println("Creating sockets for " + address + ":" + port);
			this.socket = new Socket(address, port);
			this.out = new ObjectOutputStream(socket.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		new Thread(new ClientReceive(this, socket)).start();
	}
	
	/**
	 * Get server address
	 * 
	 * @return server address
	 */
	public String getAddress() {
		return address;
	}
	
	/**
	 * Get the port of the server
	 * 
	 * @return the port server
	 */
	public int getPort() {
		return port;
	}
	
	/**
	 * Get the stream which goes out
	 * (direction: the server)
	 * 
	 * @return the output stream to the server
	 */
	public ObjectOutputStream getOut() {
		return out;
	}
	
	/**
	 * Disconnect client to the server
	 */
	public void disconnectServer() {
		try {
			if(out != null)
				out.close();
			if(socket != null)
				socket.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Get users ID (generated by the server) and their name
	 * 
	 * @return online users
	 */
	public HashMap<Integer, String> getOnlineUsers() {
		return onlineUsers;
	}

	/**
	 * Manage the message which have been received
	 * 
	 * @param mess the message which have been received
	 */
	public void messageReceived(SendableMessage mess) {
		try {
			Platform.runLater(() -> IHM.update(mess.toShow()));
		} catch (Exception e) {
			
		}
	}
}
